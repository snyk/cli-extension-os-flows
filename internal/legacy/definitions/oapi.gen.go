// Package definitions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package definitions

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for Reachability.
const (
	NOTREACHABLE Reachability = "NOT_REACHABLE"
	REACHABLE    Reachability = "REACHABLE"
)

// Defines values for VulnerabilitySeverity.
const (
	Critical VulnerabilitySeverity = "critical"
	High     VulnerabilitySeverity = "high"
	Low      VulnerabilitySeverity = "low"
	Medium   VulnerabilitySeverity = "medium"
	None     VulnerabilitySeverity = "none"
)

// Defines values for VulnerabilityType.
const (
	License VulnerabilityType = "license"
	Other   VulnerabilityType = "other"
)

// CVSSDetail defines model for CVSSDetail.
type CVSSDetail struct {
	Assigner         string   `json:"assigner"`
	CvssV3BaseScore  *float32 `json:"cvssV3BaseScore,omitempty"`
	CvssV3Vector     *string  `json:"cvssV3Vector,omitempty"`
	ModificationTime *string  `json:"modificationTime,omitempty"`
	Severity         *string  `json:"severity,omitempty"`
}

// CVSSSource defines model for CVSSSource.
type CVSSSource struct {
	Assigner         *string  `json:"assigner,omitempty"`
	BaseScore        *float32 `json:"baseScore,omitempty"`
	CvssVersion      *string  `json:"cvssVersion,omitempty"`
	ModificationTime *string  `json:"modificationTime,omitempty"`
	Severity         *string  `json:"severity,omitempty"`
	Type             *string  `json:"type,omitempty"`
	Vector           *string  `json:"vector,omitempty"`
}

// EPSSDetails defines model for EPSSDetails.
type EPSSDetails struct {
	ModelVersion *string `json:"modelVersion,omitempty"`
	Percentile   *string `json:"percentile,omitempty"`
	Probability  *string `json:"probability,omitempty"`
}

// ExploitDetails defines model for ExploitDetails.
type ExploitDetails struct {
	MaturityLevels []ExploitMaturityLevel `json:"maturityLevels"`
	Sources        []string               `json:"sources"`
}

// ExploitMaturityLevel defines model for ExploitMaturityLevel.
type ExploitMaturityLevel struct {
	Format string `json:"format"`
	Level  string `json:"level"`
	Type   string `json:"type"`
}

// Filtered defines model for Filtered.
type Filtered struct {
	Ignore []Vulnerability `json:"ignore"`
	Patch  []string        `json:"patch"`
}

// FunctionId defines model for FunctionId.
type FunctionId struct {
	ClassName    *string `json:"className"`
	FilePath     string  `json:"filePath"`
	FunctionName string  `json:"functionName"`
}

// FunctionInfo defines model for FunctionInfo.
type FunctionInfo struct {
	FunctionId FunctionId `json:"functionId"`
	Version    []string   `json:"version"`
}

// Identifiers defines model for Identifiers.
type Identifiers struct {
	ALTERNATIVE *[]string `json:"ALTERNATIVE,omitempty"`
	CVE         []string  `json:"CVE"`
	CWE         []string  `json:"CWE"`
	GHSA        *[]string `json:"GHSA,omitempty"`
	NSP         *[]string `json:"NSP,omitempty"`
	SNYK        *[]string `json:"SNYK,omitempty"`
}

// IgnoreSettings defines model for IgnoreSettings.
type IgnoreSettings struct {
	AdminOnly                  bool `json:"adminOnly"`
	AutoApproveIgnores         bool `json:"autoApproveIgnores"`
	DisregardFilesystemIgnores bool `json:"disregardFilesystemIgnores"`
	ReasonRequired             bool `json:"reasonRequired"`
}

// Insights defines model for Insights.
type Insights struct {
	TriageAdvice *string `json:"triageAdvice"`
}

// LegacyVulnerabilityResponse defines model for LegacyVulnerabilityResponse.
type LegacyVulnerabilityResponse struct {
	DependencyCount    int64           `json:"dependencyCount"`
	DisplayTargetFile  string          `json:"displayTargetFile"`
	FilesystemPolicy   bool            `json:"filesystemPolicy"`
	Filtered           Filtered        `json:"filtered"`
	FoundProjectCount  *int32          `json:"foundProjectCount,omitempty"`
	HasUnknownVersions bool            `json:"hasUnknownVersions"`
	IgnoreSettings     IgnoreSettings  `json:"ignoreSettings"`
	IsPrivate          bool            `json:"isPrivate"`
	LicensesPolicy     LicensesPolicy  `json:"licensesPolicy"`
	Ok                 bool            `json:"ok"`
	Org                string          `json:"org"`
	PackageManager     string          `json:"packageManager"`
	Path               string          `json:"path"`
	Policy             string          `json:"policy"`
	ProjectName        string          `json:"projectName"`
	Remediation        *Remediation    `json:"remediation,omitempty"`
	Summary            string          `json:"summary"`
	TargetFile         *string         `json:"targetFile,omitempty"`
	UniqueCount        int32           `json:"uniqueCount"`
	Vulnerabilities    []Vulnerability `json:"vulnerabilities"`
}

// LicenseRule defines model for LicenseRule.
type LicenseRule struct {
	Instructions string `json:"instructions"`
	LicenseType  string `json:"licenseType"`
	Severity     string `json:"severity"`
}

// LicensesPolicy defines model for LicensesPolicy.
type LicensesPolicy struct {
	OrgLicenseRules map[string]LicenseRule `json:"orgLicenseRules"`
	Severities      map[string]Severity    `json:"severities"`
}

// NewFunctionId defines model for NewFunctionId.
type NewFunctionId struct {
	FilePath     string `json:"filePath"`
	FunctionName string `json:"functionName"`
}

// NewFunctionInfo defines model for NewFunctionInfo.
type NewFunctionInfo struct {
	FunctionId NewFunctionId `json:"functionId"`
	Version    []string      `json:"version"`
}

// PatchInfo defines model for PatchInfo.
type PatchInfo struct {
	Comments         []string `json:"comments"`
	Id               string   `json:"id"`
	ModificationTime string   `json:"modificationTime"`
	Urls             []string `json:"urls"`
	Version          string   `json:"version"`
}

// PinRemediation defines model for PinRemediation.
type PinRemediation struct {
	IsTransitive bool     `json:"isTransitive"`
	UpgradeTo    string   `json:"upgradeTo"`
	Vulns        []string `json:"vulns"`
}

// Reachability defines model for Reachability.
type Reachability string

// Reference defines model for Reference.
type Reference struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// Remediation defines model for Remediation.
type Remediation struct {
	Ignore     map[string]string                 `json:"ignore"`
	Patch      map[string]string                 `json:"patch"`
	Pin        map[string]PinRemediation         `json:"pin"`
	Unresolved []Vulnerability                   `json:"unresolved"`
	Upgrade    map[string]RemediationUpgradeInfo `json:"upgrade"`
}

// RemediationUpgradeInfo defines model for RemediationUpgradeInfo.
type RemediationUpgradeInfo struct {
	UpgradeTo string   `json:"upgradeTo"`
	Upgrades  []string `json:"upgrades"`
	Vulns     []string `json:"vulns"`
}

// SemVerInfo defines model for SemVerInfo.
type SemVerInfo struct {
	Vulnerable       []string  `json:"vulnerable"`
	VulnerableHashes *[]string `json:"vulnerableHashes,omitempty"`
}

// Severity defines model for Severity.
type Severity = map[string]interface{}

// VulnFiltered defines model for VulnFiltered.
type VulnFiltered struct {
	Ignored *[]VulnFilteredIgnored `json:"ignored,omitempty"`
}

// VulnFilteredIgnored defines model for VulnFilteredIgnored.
type VulnFilteredIgnored struct {
	Created string   `json:"created"`
	Expires string   `json:"expires"`
	Path    []string `json:"path"`
	Reason  string   `json:"reason"`
	Source  string   `json:"source"`
}

// Vulnerability defines model for Vulnerability.
type Vulnerability struct {
	CVSSv3                *string                          `json:"CVSSv3,omitempty"`
	AlternativeIds        *[]string                        `json:"alternativeIds,omitempty"`
	CreationTime          string                           `json:"creationTime"`
	Credit                *[]string                        `json:"credit,omitempty"`
	CvssDetails           *[]CVSSDetail                    `json:"cvssDetails,omitempty"`
	CvssScore             *float32                         `json:"cvssScore,omitempty"`
	CvssSources           *[]CVSSSource                    `json:"cvssSources,omitempty"`
	Description           string                           `json:"description"`
	DisclosureTime        *string                          `json:"disclosureTime,omitempty"`
	EpssDetails           *EPSSDetails                     `json:"epssDetails"`
	Exploit               *string                          `json:"exploit,omitempty"`
	ExploitDetails        *ExploitDetails                  `json:"exploitDetails,omitempty"`
	Filtered              *VulnFiltered                    `json:"filtered,omitempty"`
	FixedIn               *[]string                        `json:"fixedIn,omitempty"`
	From                  []string                         `json:"from"`
	Functions             *[]FunctionInfo                  `json:"functions,omitempty"`
	FunctionsNew          *[]NewFunctionInfo               `json:"functions_new,omitempty"`
	Id                    string                           `json:"id"`
	Identifiers           *Identifiers                     `json:"identifiers,omitempty"`
	Insights              *Insights                        `json:"insights,omitempty"`
	IsDisputed            *bool                            `json:"isDisputed,omitempty"`
	IsPatchable           bool                             `json:"isPatchable"`
	IsPinnable            *bool                            `json:"isPinnable,omitempty"`
	IsRuntime             *bool                            `json:"isRuntime,omitempty"`
	IsUpgradable          bool                             `json:"isUpgradable"`
	Language              *string                          `json:"language,omitempty"`
	License               *string                          `json:"license,omitempty"`
	Malicious             *bool                            `json:"malicious,omitempty"`
	ModificationTime      *string                          `json:"modificationTime,omitempty"`
	ModuleName            *string                          `json:"moduleName,omitempty"`
	Name                  string                           `json:"name"`
	PackageManager        *string                          `json:"packageManager,omitempty"`
	PackageName           *string                          `json:"packageName,omitempty"`
	PackagePopularityRank *int32                           `json:"packagePopularityRank,omitempty"`
	Patch                 *[]string                        `json:"patch,omitempty"`
	Patches               *[]PatchInfo                     `json:"patches,omitempty"`
	Proprietary           *bool                            `json:"proprietary,omitempty"`
	PublicationTime       *string                          `json:"publicationTime,omitempty"`
	Reachability          *Reachability                    `json:"reachability,omitempty"`
	References            *[]Reference                     `json:"references,omitempty"`
	RiskScore             *uint16                          `json:"riskScore,omitempty"`
	Semver                *SemVerInfo                      `json:"semver,omitempty"`
	Severity              VulnerabilitySeverity            `json:"severity"`
	SeverityBasedOn       *string                          `json:"severityBasedOn,omitempty"`
	SeverityWithCritical  *VulnerabilitySeverity           `json:"severityWithCritical,omitempty"`
	SocialTrendAlert      *bool                            `json:"socialTrendAlert,omitempty"`
	Title                 string                           `json:"title"`
	Type                  *VulnerabilityType               `json:"type,omitempty"`
	UpgradePath           []Vulnerability_UpgradePath_Item `json:"upgradePath"`
	Version               string                           `json:"version"`
}

// VulnerabilityUpgradePath0 defines model for .
type VulnerabilityUpgradePath0 = string

// VulnerabilityUpgradePath1 defines model for .
type VulnerabilityUpgradePath1 = bool

// Vulnerability_UpgradePath_Item defines model for Vulnerability.upgradePath.Item.
type Vulnerability_UpgradePath_Item struct {
	union json.RawMessage
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity string

// VulnerabilityType defines model for VulnerabilityType.
type VulnerabilityType string

// AsVulnerabilityUpgradePath0 returns the union data inside the Vulnerability_UpgradePath_Item as a VulnerabilityUpgradePath0
func (t Vulnerability_UpgradePath_Item) AsVulnerabilityUpgradePath0() (VulnerabilityUpgradePath0, error) {
	var body VulnerabilityUpgradePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityUpgradePath0 overwrites any union data inside the Vulnerability_UpgradePath_Item as the provided VulnerabilityUpgradePath0
func (t *Vulnerability_UpgradePath_Item) FromVulnerabilityUpgradePath0(v VulnerabilityUpgradePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityUpgradePath0 performs a merge with any union data inside the Vulnerability_UpgradePath_Item, using the provided VulnerabilityUpgradePath0
func (t *Vulnerability_UpgradePath_Item) MergeVulnerabilityUpgradePath0(v VulnerabilityUpgradePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVulnerabilityUpgradePath1 returns the union data inside the Vulnerability_UpgradePath_Item as a VulnerabilityUpgradePath1
func (t Vulnerability_UpgradePath_Item) AsVulnerabilityUpgradePath1() (VulnerabilityUpgradePath1, error) {
	var body VulnerabilityUpgradePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityUpgradePath1 overwrites any union data inside the Vulnerability_UpgradePath_Item as the provided VulnerabilityUpgradePath1
func (t *Vulnerability_UpgradePath_Item) FromVulnerabilityUpgradePath1(v VulnerabilityUpgradePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityUpgradePath1 performs a merge with any union data inside the Vulnerability_UpgradePath_Item, using the provided VulnerabilityUpgradePath1
func (t *Vulnerability_UpgradePath_Item) MergeVulnerabilityUpgradePath1(v VulnerabilityUpgradePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Vulnerability_UpgradePath_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Vulnerability_UpgradePath_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
