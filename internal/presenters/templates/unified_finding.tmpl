{{define "finding_details"}}
   Finding ID: {{ getFindingId . }}
			{{- with (getVulnInfoURL .) }}
   Info: {{ . }}
			{{- end }}
			{{- with (getIntroducedBy .) }}
   Introduced by: {{ . }}
			{{- end }}
			{{- with (getIntroducedThroughWithCount .) }}
   Introduced through: {{ . }}
			{{- end }}

			{{- if not (isLicenseFinding .) }}
                {{- $riskScore := getFieldValueFrom . "Attributes.Risk.RiskScore.Value" }}
				{{- if $riskScore }}
   Risk Score: {{ $riskScore }}
				{{- else }}
   Risk Score: N/A
				{{- end }}
			{{- end }}

			{{- $reachability := getReachability . -}}
			{{- if ne $reachability "N/A" }}
   Reachability: {{ $reachability }}
			{{- end }}

			{{- if isLicenseFinding . }}
				{{- with (getLicenseInstructions .) }}
   Legal instructions:{{ . }}
				{{- end }}
			{{- end }}

{{end}}

{{- define "details" -}}
    {{- $sortedFindings := .Findings | sortFindingBy "Attributes.Rating.Severity" .Summary.SeverityOrderAsc }}
    {{- $allOpenFindings := $sortedFindings | filterFinding (isOpenFinding) }}
    {{- $openFindings := $allOpenFindings | filterFinding (isNotLicenseFindingFilter) }}
    {{- $licenseFindings := $allOpenFindings | filterFinding (isLicenseFindingFilter) }}
    {{- $pendingIgnoreFindings := $sortedFindings | filterFinding (isPendingFinding) }}
    {{- $ignoredFindings := $sortedFindings | filterFinding (isIgnoredFinding) }}
    {{- $hasOpenFindings := gt (len $openFindings) 0 }}
    {{- $hasLicenseFindings := gt (len $licenseFindings) 0 }}
    {{- $hasPendingIgnoreFindings := gt (len $pendingIgnoreFindings) 0 }}
    {{- $hasIgnoredFindings := gt (len $ignoredFindings) 0 }}

    {{- if $hasOpenFindings }}{{ printf "Security issues: %d" (len $openFindings) | title }}
		{{- range $finding := $openFindings }}
			{{- $severity := getFieldValueFrom $finding "Attributes.Rating.Severity" -}}
			{{- $title := getFieldValueFrom $finding "Attributes.Title" -}}
			{{- if not (hasSuppression $finding) -}}
				{{- printf " ✗ %s %s" (printf "[%s]" ($severity | toUpperCase) | renderInSeverityColor) ($title | bold) -}}
			{{- else -}}
				{{- printf " ! %s %s" (printf "[%s]" ($severity | toUpperCase) | renderInSeverityColor) ($title | bold) -}}
			{{- end -}}
			{{- template "suppression_label" $finding -}}
			{{- template "finding_details" $finding -}}
		{{- end }}
    {{- end }}

    {{- if $hasLicenseFindings }}{{ printf "License issues: %d" (len $licenseFindings) | title }}
		{{- range $finding := $licenseFindings }}
			{{- $severity := getFieldValueFrom $finding "Attributes.Rating.Severity" -}}
			{{- $title := getFieldValueFrom $finding "Attributes.Title" -}}
			{{- if not (hasSuppression $finding) -}}
				{{- printf " ✗ %s %s" (printf "[%s]" ($severity | toUpperCase) | renderInSeverityColor) ($title | bold) -}}
			{{- else -}}
				{{- printf " ! %s %s" (printf "[%s]" ($severity | toUpperCase) | renderInSeverityColor) ($title | bold) -}}
			{{- end -}}
			{{- template "suppression_label" $finding -}}
			{{- template "finding_details" $finding -}}
		{{- end }}
    {{- end }}
    {{- if or (and $hasOpenFindings $hasIgnoredFindings) (eq (getValueFromConfig "include-ignores") "true") }}
		{{- divider }}
    {{- end}}
{{- if eq (getValueFromConfig "include-ignores") "true" }}{{"Ignored Issues" | title }}
	{{- if $hasIgnoredFindings -}}
		{{- range $finding := $ignoredFindings}}
			{{- $severity := getFieldValueFrom $finding "Attributes.Rating.Severity" -}}
			{{- $title := getFieldValueFrom $finding "Attributes.Title" -}}
			{{- printf " ! [IGNORED] %s %s" (printf "[%s]" ($severity | toUpperCase) | renderInSeverityColor) ($title | bold) -}}
			{{- template "finding_details" $finding -}}
		{{- end }}
	{{- else}}  There are no ignored issues
	{{- end -}}
{{tip "Ignores are currently managed in the Snyk Web UI.\nTo edit or remove the ignore please go to: https://app.snyk.io/"}}
{{- end}}
{{- end}}{{/* end "details" */}}

{{define "header" }}
{{ $displayPath := constructDisplayPath .DisplayTargetFile -}}
{{ print "Testing " $displayPath " ..." | bold }}
{{end }}

{{- define "summary"}}{{ "Test Summary" | bold }}

  Organization:      {{ getValueFromConfig "internal_org_slug" }}
  Test type:         {{ if eq .Summary.Type "sast" }}Static code analysis{{else}}{{ .Summary.Type }}{{ end}}
  Project path:      {{ getValueFromConfig "targetDirectory" }}

  {{- $vulnResults := getSummaryResultsByIssueType "vulnerability" .Findings .Summary.SeverityOrderAsc }}
  {{- $licenseResults := getSummaryResultsByIssueType "license" .Findings .Summary.SeverityOrderAsc }}

  {{- if and (eq (len $vulnResults) 0) (eq (len $licenseResults) 0) }}
  {{- "\n" }}
  Total issues: 0
  {{- end }}

  {{- if gt (len $vulnResults) 0 }}

  Total security issues: {{ getIssueCountsTotal $vulnResults }}
  {{- $total := getIssueCountsTotal $vulnResults }}
  {{- $open := getIssueCountsOpen $vulnResults }}
  {{- $ignored := getIssueCountsIgnored $vulnResults }}
  Ignored: {{ $ignored }} [
  {{- range $severity := .Summary.SeverityOrderAsc | reverse }}
      {{- $count := 0 }}
      {{- range $res := $vulnResults }}
          {{- if eq $res.Severity $severity }}
              {{- $count = $res.Ignored }}
          {{- end }}
      {{- end }}
      {{- print " " $count " " $severity " " | toUpperCase | renderInSeverityColor }}
  {{- end}}]
  Open   : {{ $open }} [
  {{- range $severity := .Summary.SeverityOrderAsc | reverse }}
      {{- $count := 0 }}
      {{- range $res := $vulnResults }}
          {{- if eq $res.Severity $severity }}
              {{- $count = $res.Open }}
          {{- end }}
      {{- end }}
      {{- print " " $count " " $severity " " | toUpperCase | renderInSeverityColor }}
  {{- end}}]
  {{- end }}

  {{- if gt (len $licenseResults) 0 }}

  Total license issues: {{ getIssueCountsTotal $licenseResults }}
  {{- $total := getIssueCountsTotal $licenseResults }}
  {{- $open := getIssueCountsOpen $licenseResults }}
  {{- $ignored := getIssueCountsIgnored $licenseResults }}
  Ignored: {{ $ignored }} [
  {{- range $severity := .Summary.SeverityOrderAsc | reverse }}
      {{- $count := 0 }}
      {{- range $res := $licenseResults }}
          {{- if eq $res.Severity $severity }}
              {{- $count = $res.Ignored }}
          {{- end }}
      {{- end }}
      {{- print " " $count " " $severity " " | toUpperCase | renderInSeverityColor }}
  {{- end}}]
  Open   : {{ $open }} [
  {{- range $severity := .Summary.SeverityOrderAsc | reverse }}
      {{- $count := 0 }}
      {{- range $res := $licenseResults }}
          {{- if eq $res.Severity $severity }}
              {{- $count = $res.Open }}
          {{- end }}
      {{- end }}
      {{- print " " $count " " $severity " " | toUpperCase | renderInSeverityColor }}
  {{- end}}]
  {{- end }}
{{- end }} {{/* end summary */}}

{{- define "remediationDetails" }}
{{- printf "  ✗ %s %s in %s\n"  (printf "%s %s" (.Vulnerability.Name | bold) (printf "[%s Severity]" (.Vulnerability.Severity | capitalize) | renderInSeverityColor) | renderInSeverityColor) (printf "[https://security.snyk.io/vulns/%s]" .Vulnerability.ID) (.VulnerablePackage.Name | bold) -}}
{{- printf "    introduced by %s\n" (getRemediationIntroducedByWithCount .) -}}
{{- end }}

{{- define "main" }}
{{- range .Results}}
    {{- template "header"  . }}

    {{- $openFindings := .Findings | filterFinding (isOpenFinding) }}
    {{- $openIssuesCount := len $openFindings }}

    {{- if gt .DependencyCount 0 -}}
        {{- if eq $openIssuesCount 0 -}}
            {{- printf "\n✔ Tested %d dependencies for known issues, no vulnerable paths found.\n" .DependencyCount | renderGreen -}}
        {{- else -}}
            {{- printf "\nTested %d dependencies for known issues, found %d issues, %d vulnerable paths.\n" .DependencyCount $openIssuesCount .VulnerablePathsCount -}}
        {{- end -}}
    {{- end }}

    {{- template "details" . }}

    {{- $remediationSummary := getRemediationSummary .Findings -}}
    {{- if gt (len $remediationSummary.Upgrades) 0 -}}
	{{- "Issues to fix by upgrading:\n" | renderGreen | bold -}}
	{{- range $upgrade := $remediationSummary.Upgrades -}}
	    {{- printf "\n  Upgrade %s to %s to fix\n" (printf "%s@%s" $upgrade.From.Name $upgrade.From.Version) (printf "%s@%s" $upgrade.To.Name $upgrade.To.Version) }}
	    {{- range $fix := $upgrade.Fixes }}
		{{- template "remediationDetails" $fix -}}
	    {{- end }}
	{{- end }}
    {{- end }}

    {{- if gt (len $remediationSummary.Pins) 0 -}}
	{{- "\nIssues to fix by upgrading dependencies:\n" | renderGreen | bold -}}
	{{- range $pin := $remediationSummary.Pins -}}
	    {{- printf "\n  Pin %s to %s to fix\n" (printf "%s@%s" $pin.From.Name $pin.From.Version) (printf "%s@%s" $pin.To.Name $pin.To.Version) }}
	    {{- range $fix := $pin.Fixes }}
		{{- template "remediationDetails" $fix -}}
	    {{- end }}
	{{- end }}
    {{- end }}
    {{- if gt (len $remediationSummary.Unresolved) 0 -}}
	{{- "\nIssues with no direct upgrade or patch:" | renderGray | bold -}}
	{{- "\n" -}} {{/* This needs to be on a separate line, otherwise the bold function will add extra white spaces */}}
	{{- range $unresolved := $remediationSummary.Unresolved -}}
	    {{- template "remediationDetails" $unresolved -}}
	    {{- if gt (len $unresolved.FixedInVersions) 0 -}}
		{{- printf "  This issue was fixed in: %s\n" (join $unresolved.FixedInVersions "," | bold) -}}
	    {{- end }}
	{{- end }}
    {{- end }}

    {{- if not (eq (getValueFromConfig "severity-threshold") "") }}
        {{ tip "You are currently viewing results with --severity-threshold applied.\nTo view all issues, remove the --severity-threshold flag"}}
    {{- end }}

    {{- "\n" }}

    {{- box (renderToString "summary" .)}}

    {{- if ne (getValueFromConfig "include-ignores") "true" }}

        {{- tip "To view ignored issues, use the --include-ignores option."}}
        {{- "\n" }}
    {{- end }}

{{- end }}


{{- end }} {{/* end main */}}

{{ template "main" . }}
